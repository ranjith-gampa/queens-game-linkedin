name: Auto Add Daily Level

on:
  schedule:
    # Run every day at 00:00 AM Pacific Time
    # Pacific Time is UTC-8 (PST) or UTC-7 (PDT)
    # Using 07:02 UTC to target midnight Pacific during daylight saving time (PDT)
    # During standard time (PST), this will be 11:02 PM PST (previous day)
    - cron: '2 7 * * *'
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  add-level:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Increased timeout for server startup and level creation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install chromium

    - name: Install tsx for TypeScript execution
      run: npm install -g tsx

    - name: Install xvfb for headless display
      run: sudo apt-get update && sudo apt-get install -y xvfb

    - name: Start development server
      run: |
        echo "🚀 Starting development server in background..."
        # Add environment variables for CI compatibility
        export NODE_ENV=development
        export CI=false
        npm run start -- --host 0.0.0.0 --strictPort &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        echo "📝 Server PID: $SERVER_PID"
        
        # Wait for server to be ready
        echo "⏳ Waiting for server to start..."
        timeout=120
        while [ $timeout -gt 0 ]; do
          if curl -s http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Server is ready!"
            echo "🌐 Testing server response..."
            curl -s -I http://localhost:3000 | head -1
            break
          fi
          echo "⏱️  Waiting for server... ($timeout seconds remaining)"
          # Show what processes are running on port 3000
          if [ $((timeout % 20)) -eq 0 ]; then
            echo "🔍 Checking for processes on port 3000..."
            netstat -tlnp 2>/dev/null | grep :3000 || echo "No processes found on port 3000"
          fi
          sleep 3
          timeout=$((timeout - 3))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ Server failed to start within 120 seconds"
          echo "🔍 Final process check..."
          ps aux | grep -E "(vite|node)" | grep -v grep || echo "No vite/node processes found"
          netstat -tlnp 2>/dev/null | grep :3000 || echo "No processes on port 3000"
          exit 1
        fi

    - name: Get current date for level calculation
      id: date
      run: |
        echo "🕐 Workflow started at: $(date -u)"
        echo "🌍 UTC time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Get current date in Pacific timezone
        current_date=$(TZ=America/Los_Angeles date +%Y-%m-%d)
        echo "📅 Pacific date: $current_date"
        echo "current_date=$current_date" >> $GITHUB_OUTPUT
        
        # Calculate day of week (0=Sunday, 1=Monday, etc.)
        day_of_week=$(TZ=America/Los_Angeles date +%w)
        day_name=$(TZ=America/Los_Angeles date +%A)
        echo "📆 Day of week: $day_name ($day_of_week)"
        echo "day_of_week=$day_of_week" >> $GITHUB_OUTPUT
        
        # Show Pacific time
        pacific_time=$(TZ=America/Los_Angeles date '+%Y-%m-%d %H:%M:%S %Z')
        echo "🕐 Pacific time: $pacific_time"

    - name: Add level using enhanced script
      id: add_level
      run: |
        # Make the script executable
        chmod +x ./scripts/automate-level.sh
        chmod +x ./scripts/automate-level-production.sh
        
        # Try the dev server approach first
        echo "🚀 Attempting level addition with dev server..."
        if xvfb-run -a ./scripts/automate-level.sh auto "" false 2>&1 | tee automation.log; then
          echo "✅ Dev server automation succeeded"
          automation_method="dev-server"
        else
          echo "❌ Dev server automation failed, trying production build..."
          
          # Stop the dev server if it's still running
          if [ ! -z "$SERVER_PID" ]; then
            echo "🛑 Stopping dev server (PID: $SERVER_PID)..."
            kill $SERVER_PID 2>/dev/null || true
            wait $SERVER_PID 2>/dev/null || true
          fi
          
          # Try with production build
          echo "🏗️ Attempting level addition with production build..."
          xvfb-run -a ./scripts/automate-level-production.sh auto "" false 2>&1 | tee automation-production.log
          automation_method="production-build"
          # Use the production log for extracting information
          cp automation-production.log automation.log
        fi
        
        echo "automation_method=$automation_method" >> $GITHUB_OUTPUT
        
        # Extract information from the log for later steps
        day_of_week="${{ steps.date.outputs.day_of_week }}"
        current_date="${{ steps.date.outputs.current_date }}"
        
        if [ "$day_of_week" = "0" ]; then
          # Sunday - both levels added
          echo "level_type=both" >> $GITHUB_OUTPUT
          level_number=$(grep "regular level" automation.log | grep -o '[0-9]\+' | tail -1)
          echo "level_number=$level_number" >> $GITHUB_OUTPUT
          echo "current_date=$current_date" >> $GITHUB_OUTPUT
        elif grep -q "regular level" automation.log; then
          level_number=$(grep "regular level" automation.log | grep -o '[0-9]\+' | tail -1)
          echo "level_type=regular" >> $GITHUB_OUTPUT
          echo "level_number=$level_number" >> $GITHUB_OUTPUT
        elif grep -q "bonus level" automation.log; then
          echo "level_type=bonus" >> $GITHUB_OUTPUT
          echo "current_date=$current_date" >> $GITHUB_OUTPUT
        fi

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet && git diff --cached --quiet; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected"
        fi

    - name: Commit and push changes
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        level_type="${{ steps.add_level.outputs.level_type }}"
        current_date="${{ steps.date.outputs.current_date }}"
        
        if [ "$level_type" = "both" ]; then
          level_number="${{ steps.add_level.outputs.level_number }}"
          commit_message="Auto-add level $level_number and bonus level for $current_date (Sunday)"
        elif [ "$level_type" = "bonus" ]; then
          commit_message="Auto-add bonus level for $current_date"
        else
          level_number="${{ steps.add_level.outputs.level_number }}"
          commit_message="Auto-add level $level_number for $current_date"
        fi
        
        git add .
        git commit -m "$commit_message"
        git push

    - name: Upload debug artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-artifacts-${{ github.run_number }}
        path: |
          debug-*.png
          debug-*.html
          scripts/*.png
          automation.log
          automation-production.log
        retention-days: 7

    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const level_type = '${{ steps.add_level.outputs.level_type }}';
          const current_date = '${{ steps.date.outputs.current_date }}';
          const level_number = '${{ steps.add_level.outputs.level_number }}';
          
          let title, body;
          if (level_type === 'both') {
            title = `Failed to auto-add levels (regular ${level_number} and bonus) for ${current_date}`;
            body = `The automated level addition failed for ${current_date}. Should have added both regular level ${level_number} and bonus level.\n\nPlease check the workflow logs and debug artifacts.`;
          } else if (level_type === 'bonus') {
            title = `Failed to auto-add bonus level for ${current_date}`;
            body = `The automated bonus level addition failed for ${current_date}.\n\nPlease check the workflow logs and debug artifacts.`;
          } else {
            title = `Failed to auto-add level ${level_number} for ${current_date}`;
            body = `The automated level ${level_number} addition failed for ${current_date}.\n\nPlease check the workflow logs and debug artifacts.`;
          }
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body + `\n\n**Workflow run:** https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            labels: ['automation', 'bug']
          });

    - name: Create PR instead of direct push (alternative approach)
      if: false # Set to true if you prefer PR workflow
      run: |
        level_type="${{ steps.add_level.outputs.level_type }}"
        current_date="${{ steps.date.outputs.current_date }}"
        
        if [ "$level_type" = "both" ]; then
          level_number="${{ steps.add_level.outputs.level_number }}"
          branch_name="auto-add-both-levels-$level_number-$current_date"
          pr_title="Auto-add level $level_number and bonus level for $current_date (Sunday)"
        elif [ "$level_type" = "bonus" ]; then
          branch_name="auto-add-bonus-level-$current_date"
          pr_title="Auto-add bonus level for $current_date"
        else
          level_number="${{ steps.add_level.outputs.level_number }}"
          branch_name="auto-add-level-$level_number-$current_date"
          pr_title="Auto-add level $level_number for $current_date"
        fi
        
        git checkout -b "$branch_name"
        git add .
        git commit -m "$pr_title"
        git push origin "$branch_name"
        
        # Create PR using GitHub CLI
        gh pr create --title "$pr_title" --body "Automatically generated level for $current_date" --head "$branch_name" --base main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        level_type="${{ steps.add_level.outputs.level_type }}"
        current_date="${{ steps.date.outputs.current_date }}"
        has_changes="${{ steps.changes.outputs.has_changes }}"
        
        if [ "$has_changes" = "true" ]; then
          if [ "$level_type" = "both" ]; then
            level_number="${{ steps.add_level.outputs.level_number }}"
            echo "✅ Successfully added level $level_number and bonus level for $current_date (Sunday)"
          elif [ "$level_type" = "bonus" ]; then
            echo "✅ Successfully added bonus level for $current_date"
          else
            level_number="${{ steps.add_level.outputs.level_number }}"
            echo "✅ Successfully added level $level_number for $current_date"
          fi
        else
          echo "ℹ️ No changes were made - level may already exist"
        fi

    - name: Stop development server
      if: always()
      run: |
        if [ -n "$SERVER_PID" ] && kill -0 "$SERVER_PID" 2>/dev/null; then
          echo "🛑 Stopping development server (PID: $SERVER_PID)"
          kill "$SERVER_PID" || true
          # Wait a moment for graceful shutdown
          sleep 2
          # Force kill if still running
          kill -9 "$SERVER_PID" 2>/dev/null || true
        else
          echo "ℹ️ Development server was not running or already stopped"
        fi
